#include<opencv2/core.hpp>
#include<opencv2/imgcodecs.hpp>
#include<opencv2/imgproc.hpp>
#include<opencv2/highgui.hpp>
#include<string.h>
#include<vector>
#include<stdio.h>
#include<iostream>
#include<opencv2/xfeatures2d.hpp>
#include<opencv2/features2d.hpp>



using namespace cv;
using namespace std;
using namespace cv::xfeatures2d;


struct compteur
{
	int gauche;
	int haut;
	int droite;
	int bas;
};

struct forme_geometrique
{
	float carre;
	float triangle;
	float cercle;
};

struct double_version {
	Mat normal;
	Mat gray;
};



void couper_image(Mat img) { 

	imwrite("../data/data.png", img);
	Mat nouvelle_image; 
	nouvelle_image = imread("../data/data.png");

	//imshow("Ma fenetre", img);
	medianBlur(nouvelle_image, nouvelle_image, 5);//on lisse l'image
	int y_min = 32760, y_max = 0, x_min = 32760, x_max = 0; //32 760 a peu pres valeur max pour un int
	int y = 0, x = 0;

	for (y = 0; y < nouvelle_image.rows; y++) //nouvelle_image.rows = nombre de lignes de pixel
	{
		for (x = 0; x < nouvelle_image.cols; x++) // nouvelle_image.cols = nombre de colonnes de pixel
		{
			if (nouvelle_image.at<Vec3b>(y, x)[0] >= 50 || nouvelle_image.at<Vec3b>(y, x)[1] >= 50 || nouvelle_image.at<Vec3b>(y, x)[2] <= 200)  //nouvelle_image.at<Vec3b> = valeur BGR (blue green red) du pixel 
			{
				// on met tous ce qui est pas trop rouge en noir
				nouvelle_image.at<Vec3b>(y, x)[0] = 0;
				nouvelle_image.at<Vec3b>(y, x)[1] = 0;
				nouvelle_image.at<Vec3b>(y, x)[2] = 0;
			}
			else
			{
				//On setup nos max et min
				if (y_min > y)
					y_min = y;

				if (x_min > x)
					x_min = x;

				if (y_max < y)
					y_max = y;

				if (x_max < x)
					x_max = x;
				
				//On met un bon gros rouge
				nouvelle_image.at<Vec3b>(y, x)[0] = 0;
				nouvelle_image.at<Vec3b>(y, x)[1] = 0;
				nouvelle_image.at<Vec3b>(y, x)[2] = 255;
			}
		}
	}
	
	Rect image_coupe = Rect(x_min,y_min, x_max - x_min, y_max-y_min); //On coupe et redimensionne notre image pour juste avoir notre forme 
	nouvelle_image = nouvelle_image(image_coupe);//on creer une nouvelle variable image dans laquelle on stock notre image coupé
	
	//imshow("Une autre fenetre", nouvelle_image);//on l'affiche
	imwrite("../data/nouvelle_image.jpg", nouvelle_image);//On l'enregistre dans un nouvelle endroit

	waitKey(0);
	destroyAllWindows(); 

}

forme_geometrique comprendre_image_key_point_t()
{
	Mat img = imread("../data/nouvelle_image.jpg");
	int i = 0,moyenne_pixel = (img.rows+img.cols)/2;
	bool trouve = false;
	compteur compteur;
	compteur.gauche = 0;
	compteur.haut = 0;
	compteur.droite = 0;
	compteur.bas = 0;

	//Bord Gauche de l'image
	for (i = 0; i < img.rows; i++)
	{
		if (img.at<Vec3b>(i, 1)[2] >= 150)
		{
			compteur.gauche += 1;
		}
		else 
		{
			img.at<Vec3b>(i, 5)[1] = 100;
			img.at<Vec3b>(i, 5)[2] = 100;
			img.at<Vec3b>(i, 5)[0] = 100;
		}
	}
	
	//Bord Haut de l'image
	for (i = 0; i < img.cols; i++)
	{
		if (img.at<Vec3b>(2, i)[2] >= 150)
		{
			compteur.haut += 1;
		}
		else
		{
			img.at<Vec3b>(5, i)[1] = 150;
		}
	}

	//Bord Bas de l'image
	
	for (i = 0; i < img.cols - 1; i++)
	{
		if (img.at<Vec3b>(img.rows - 1, i)[2] >= 150)
		{
			compteur.bas += 1;
		}
		else
		{
			img.at<Vec3b>(img.rows - 5, i)[0] = 150;
		}
	}


	printf("\nHaut : %d", compteur.haut);
	printf("\nBas : %d", compteur.bas);
	printf("\nGauche : %d \n", compteur.gauche);

	printf("Moyenne pixel : %d \n \n", moyenne_pixel);

	forme_geometrique fg;
	fg.carre = 0;
	fg.triangle = 0;
	fg.cercle = 0;

	//RECTANGLE
	if (compteur.haut > img.cols * 3 / 4 && compteur.gauche > img.rows * 3 / 4 )//On compare les pixels du haut avec le nombre de pixel total d'en haut ( et pareile pour à gauche )
	{
		fg.carre = 1;
		trouve = true;
	}

	//TRIANGLE
	if (compteur.bas - compteur.haut > img.cols / 8 ) //la difference entre les pixel rouge du bas et celle des pixel rouge en haut devrait donner un nombre très grand
	{											//Comme on prend juste les pixels horizontaux on compare la différence obtenue a img.cols
		fg.triangle = 1;
		trouve = true;
	}

	//CERCLE
	if (abs(compteur.haut - compteur.gauche) < moyenne_pixel / 5 && trouve == false) //La valeure absolue de cette différence doit donner un nombre petit, 
																  //comme on soustrait des pixels sur le plan horizontal a des pixels sur le plan verticale , 
																  //il faut comparer le resultat a moy_pixel
																	//On rajoute le boolean trouve , car celon les criteres pour un triangle ou un carre (et non rectangle) marche pour un cercle aussi
		fg.cercle = 1;

	return fg;
}

forme_geometrique comprendre_image_pixelBpixel(bool sortie)
{
	forme_geometrique retourner;
	Mat img = imread("../data/nouvelle_image.jpg"), rotation = getRotationMatrix2D(Point(img.cols / 2, img.rows / 2), 180, 1);
	Point point_de_depart, contour;
	int y = 0, i, jean_mich = 0, tab_a_remplacer[4010] = { NULL }, taill_tab_a_remplacer = 0,cpt=0;


	//Trouver le point de départ, il nous permettra de mettre fin a la boucle une fois que cela sera implémenté
	while (y<img.rows)
	{
		if (img.at<Vec3b>(y, 2)[2] >= 200 && img.at<Vec3b>(y, 2)[1] <= 25 && img.at<Vec3b>(y, 2)[0] <= 25)
		{
			point_de_depart.x = 0;
			point_de_depart.y = y;

			for (i = y; i > 0; i--)
			{
				img.at<Vec3b>(i, 1)[1] = 200;
				img.at<Vec3b>(i, 1)[0] = 0;
				img.at<Vec3b>(i, 1)[2] = 0;
			}
			y += img.rows;  //On force la sortie de sortie de boucle
		}
		else
		{
			y++;
		}
	}

	//Ce balader sur le cercle
	contour.x = point_de_depart.x + 2;//On initialise notre point "contour" pour qu'il commence sur le cercle , avec un petit coup de pouce
	contour.y = point_de_depart.y + 2;//On initialise notre point "contour" pour qu'il commence sur le cercle , avec un petit coup de pouce
	do
	{
		//Bas
		if (img.at<Vec3b>(contour.y + 1, contour.x)[2] >= 170 && contour.y == img.cols - 1)
		{
			printf("\nBas");
			img.at<Vec3b>(contour.y + 1, contour.x)[2] = 0;//On met la composante rouge de notre pixel à 0, cela nous permet de ne pas passer 2 fois au même endroit
			img.at<Vec3b>(contour.y + 1, contour.x)[0] = 200;//On colorie le pixel droit en bleu, cela nous permet d'avoir un retour visuelle de ce que notre programme fait
			contour.y += 1;//On fait avancer notre point
			tab_a_remplacer[taill_tab_a_remplacer] = 3;//On stock la direction qu'on a prise (Direction Horaire, comme une horloge)
			taill_tab_a_remplacer++;//On fait avancer la variable qui retiens l'avancement dans notre tableau
		}

		//Droite
		else if (img.at<Vec3b>(contour.y, contour.x + 1)[2] >= 170)// && contour.x <= img.rows - 1 )
		{
			printf("\nDroite");
			img.at<Vec3b>(contour.y, contour.x + 1)[2] = 0;
			img.at<Vec3b>(contour.y, contour.x + 1)[0] = 200;
			contour.x += 1;
			tab_a_remplacer[taill_tab_a_remplacer] = 12;
			taill_tab_a_remplacer++;
		}

		//Haut
		else if (img.at<Vec3b>(contour.y - 1, contour.x)[2] >= 170)//&& contour.y >= 1)
		{
			printf("\nHaut");
			img.at<Vec3b>(contour.y - 1, contour.x)[2] = 0;
			img.at<Vec3b>(contour.y - 1, contour.x)[0] = 200;
			contour.y -= 1;
			tab_a_remplacer[taill_tab_a_remplacer] = 9;
			taill_tab_a_remplacer++;
		}

		//Droite
		else if (img.at<Vec3b>(contour.y, contour.x - 1)[2] >= 170)//&& contour.x >= 1)
		{
			printf("\nDroite");
			img.at<Vec3b>(contour.y, contour.x - 1)[2] = 0;
			img.at<Vec3b>(contour.y, contour.x - 1)[0] = 200;
			contour.x -= 1;
			tab_a_remplacer[taill_tab_a_remplacer] = 6;
			taill_tab_a_remplacer++;
		}

		else
		{
			//----------------------------------------------------------------
			circle(img, contour, 10, Scalar(0, 200, 0), 3, LINE_AA); // On fait un joli cercle vert pour mettre en valeure le point d'arret (il ne touche pas a la valeure rouge des piexels ainsi il pourra tjrs passer dessus)

			//On demande la valeure des pixels alentours afin de voir pourquoi il s'est arrété, sans oublier de vérifier si nous n'avons pas atteins les limites de notre image(sinon ça risque de crash)
			if (contour.y >= img.rows - 1)
				printf("Limite haute de l'image atteind");
			else
				printf("\n couleur pixel Haut :%d", img.at<Vec3b>(contour.y, contour.x + 1)[2]);
			//
			if (contour.x <= 1)
				printf("Limite bas de l'image atteind");
			else
				printf("\n couleur pixel Bas :%d", img.at<Vec3b>(contour.y, contour.x - 1)[2]);
			//
			if (contour.x >= img.cols - 1)
				printf("Limite droite de l'image atteind");
			else
				printf("\n couleur pixel Droite :%d", img.at<Vec3b>(contour.y + 1, contour.x)[2]);
			//
			if (contour.y <= 1)
				printf("Limite gauche de l'image atteind");
			else
				printf("\n couleur pixel Gauche :%d", img.at<Vec3b>(contour.y - 1, contour.x)[2]);
			//------------------------------------------------------------------

			
			if (sortie == false) //Cas ou on a pas encore fait la rotation
			{
				//cv::imshow("Je vais retourner cette image", img);
				cv::waitKey(0);

				warpAffine(img, img, rotation, Point(img.cols, img.rows));//On fait pivoter notre image (src,dst,matrice de rotation,point par rapport lequel on fait tourner notre image)
				imwrite("../data/nouvelle_image.jpg", img);//On stock ce que l'on a fait
				retourner = comprendre_image_pixelBpixel(true);//On retourne l'image et on recommence
				cpt = retourner.triangle; // Ainsi on obtient un résultat que l'on stock ici
				img = imread("../data/nouvelle_image.jpg");
				break;
			}
			else//Cas ou on a deja fait la rotation
			{
				imwrite("../data/nouvelle_image.jpg", img);//On stock ce que l'on a fait
			}

			//Cela nous permet de savoir si c'est un triangle
			//Comme le cercle et le carré son symétrique par rapport a la rotation, cette différence ne doit pas être grande, alors que pour un triangle....
			
			if ((-50 < cpt - jean_mich) && (cpt-jean_mich < 50) && (!sortie) )
				cpt = 0;
			else
 				cpt = 1;

			jean_mich += 20000;//sortie de boucle
		}
		cpt++;
		jean_mich++;
	} while (jean_mich<20000); //Mettre quelque chose avec une comparaison entre "point de depart" et "contour" et surement un compteur pour éviter de mettre fin a la boucle des le début du programme

	if (sortie == false)
	{
		cv::imshow("PbP", img);
		cv::waitKey(0);
		//cv::destroyAllWindows();

		jean_mich = 0;
		int combo = 0;
		for (i = 0; i < taill_tab_a_remplacer; i++)
		{
			if (tab_a_remplacer[i] == tab_a_remplacer[i + 1])
			{
				combo++;
				jean_mich += combo;//Si c'est un rectangle, la valeure combo va monter a des sommets inimaginables (O.o) alors que avec un cercle il va monter a 20-30 grand max 
			}
			else
				combo = 0;
		}

		if (cpt == 1)
		{
			retourner.carre = 0;
			retourner.triangle = 1;
			retourner.cercle = 0;
		}

		else if (jean_mich > img.cols * img.rows) {
			retourner.carre = 1;
			retourner.triangle = 0;
			retourner.cercle = 0;
		}
		else {
			retourner.carre = 0;
			retourner.triangle = 0;
			retourner.cercle = 1;
		}

		return retourner;
	}
	else {
		retourner.carre = 0;
		retourner.triangle = cpt;
		retourner.cercle = 0;
		return retourner;
	}
		
	}


bool opencv_Hough(Mat input) {
	Mat src_gray;

	cvtColor(input, src_gray, COLOR_BGR2GRAY);

	GaussianBlur(src_gray, src_gray, Size(9, 9), 2, 2);

	vector<Vec3f> circles;

	HoughCircles(src_gray, circles, CV_HOUGH_GRADIENT, 1, src_gray.rows / 8, 200, 100, 0, 0);

	if (circles.size() == 0)
		return false;

	else
		return true;

}


Mat surf(Mat img) {
	if (img.empty())

		std::cout << "image vide...";

	else

		
	imshow("Fenetre", img);
	Mat img_1 = img;
	int minHessian = 500;

	Ptr<SURF> detector = SURF::create(minHessian);

	std::vector<KeyPoint> keypoints_1, keypoints_2;

	detector->detect(img_1, keypoints_1);
	Mat img_keypoints_1=img_1;
	drawKeypoints(img_1, keypoints_1, img_keypoints_1, Scalar::all(-1), DrawMatchesFlags::DEFAULT);
	imshow("Keypoints 1", img_keypoints_1);

	// detector->detect(img_2, keypoints_2); //deuxième image = noir et blanc pour voir différence de précision
	waitKey(0);
	return(img_keypoints_1);
}


void utilisation_de_surf(Mat img) {
	int i, j,moyenne=0;
	size_t longueur=1,element_distance=1,element_key_point=1;
	int *coo_x,*coo_y,*distance,*key_point;
	coo_x = (int*)malloc(1 * sizeof(int));
	coo_y = (int*)malloc(1 * sizeof(int));
	distance = (int*)malloc(1 * sizeof(int));
	key_point = (int*)malloc(1 * sizeof(int));


	//On essaye de stocker les coordonnées de chaque point de couleur
	for (i = 1; i < img.cols; i++){
		for (j = 1; j < img.rows; i++) {
			if (img.at<Vec3b>(i, j)[0] != img.at<Vec3b>(i, j)[1] != img.at<Vec3b>(i, j)[2]) {
				coo_x[longueur-1] = i;
				coo_y[longueur-1] = j;
				longueur++;
				coo_x = (int*)realloc(coo_x, longueur * sizeof(int));
				coo_y = (int*)realloc(coo_y, longueur * sizeof(int));
			}
		}
	}
	//On regarde la distance moyenne entre chaque point
	for (i = 0; i < longueur; i++) {
		distance[element_distance] = (int)sqrt(((coo_x[i] - coo_x[i + 1]) ^ 2) + ((coo_y[i] - coo_y[i + 1]) ^ 2));
		element_distance++;
		realloc(distance, element_distance * sizeof(int));
	}

	for (i = 0; i < element_distance; i++) {
		moyenne += distance[i];
	}
	moyenne = (int) (moyenne / element_distance);

	key_point[0] = 0;
	//On trouve les "key points" c'est à dire, 2 points qui vont nous permettre de tracer une droite, qui sont un peu éloigné mais pas trop
	for (i = 0; i < element_distance; i++) {
		if (distance[i] > moyenne) {
			key_point[element_key_point] = i;
			element_key_point++;
			realloc(key_point, element_key_point * sizeof(int));
		}
	}

	//On trace des droites entre nos "key points" trouver juste au dessus
	for (i = 0; i < element_key_point; i+=2) {
		line(img, Point(coo_x[key_point[i]], coo_y[key_point[i]]), Point(coo_x[key_point[i + 1]], coo_y[key_point[i + 1]]), Scalar(250,0,0), 1, 8, 0);
	}
	//imshow("utilisisation de surf",img);
	waitKey();
}

forme_geometrique additionneur(forme_geometrique fg1, forme_geometrique fg2) {
	fg1.carre += fg2.carre;
	fg1.cercle += fg2.cercle;
	fg1.triangle += fg2.triangle;

	return fg1;
}


double_version definir_image(int cpt)
{
	double_version img;
	
	switch (cpt) {
	case 3:
		img.normal = imread("../data/rond.png");
		img.gray = imread("../data/rond.png", CV_BGR2GRAY);
		break;
	case 1:
		img.normal = imread("../data/rectangle.png");
		img.gray = imread("../data/rectangle.png", CV_BGR2GRAY);
		break;
	case 2:
		img.normal = imread("../data/triangle.png");
		img.gray = imread("../data/triangle.png", CV_BGR2GRAY);
		break;
	}
	return img;
		
}

void afficher(forme_geometrique fg) {
	printf_s("\n\n\n\n\n\n\n");
	printf_s("Il y a %2f des programmes qui pensent que c'est un carre\n", fg.carre);
	printf_s("Il y a %2f des programmes qui pensent que c'est un triangle\n", fg.triangle);
	printf_s("Il y a %2f des programmes qui pensent que c'est un cercle\n", fg.cercle);

}


forme_geometrique Hough_line(Mat src) {
	Mat dst, cdst;
	forme_geometrique fg;
	fg.carre = 0;
	fg.cercle = 0;
	fg.triangle = 0;

	Canny(src, dst, 50, 200, 3);
	cvtColor(dst, cdst, CV_GRAY2BGR);


	vector<Vec2f> lines;
	HoughLines(dst, lines, 1, CV_PI / 180, 100, 0, 0);

	if (lines.size() == 0)
		fg.cercle = 1;
	else if (lines.size() == 6)
		fg.triangle = 1;
	else
		fg.carre = 1;

	return fg;

	
}


int main()
{
	
	Size size(500, 500);
	double_version img;
	int i;
	forme_geometrique resultat;
	

	for (i = 1; i < 4; i++) {
		resultat.carre = 0;
		resultat.triangle = 0;
		resultat.triangle = 0;

		img = definir_image(i);

		
		waitKey();
		couper_image(img.normal);
		resultat = additionneur(resultat,comprendre_image_pixelBpixel(false));
		cvDestroyAllWindows();


		couper_image(img.normal);
		resultat = additionneur(resultat,comprendre_image_key_point_t());
		waitKey();
		cvDestroyAllWindows();

		resultat = additionneur(resultat, Hough_line(img.normal));

		waitKey();
		if (opencv_Hough(img.gray))
			resultat.cercle += 1;
		else {
			resultat.carre += 0.5;
			resultat.triangle += 0.5;
		}

		Mat input = surf(img.gray); //inutile pour l'instant 
		//utilisation_de_surf(input);
		cvDestroyAllWindows();

		resize(img.normal, img.normal,size);
		imshow("Original recadre", img.normal);
		afficher(resultat);
		waitKey(0);
	}
	
	return 0;
	
}
